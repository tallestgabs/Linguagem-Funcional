module SkelLI where

-- Haskell module generated by the BNF converter

import AbsLI
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog functions -> failure x
transFunction :: Function -> Result
transFunction x = case x of
  Fun type_ ident decls stms -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Dec type_ ident -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SDec decl -> failure x
  SAss ident exp -> failure x
  SBlock stms -> failure x
  SWhile exp stm -> failure x
  SReturn exp -> failure x
  SIf exp stm1 stm2 -> failure x
transType :: Type -> Result
transType x = case x of
  Tbool -> failure x
  Tint -> failure x
  Tvoid -> failure x
  TStr -> failure x
  TFun function -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EOr exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  ENot exp -> failure x
  ECon exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  Call ident exps -> failure x
  EInt integer -> failure x
  EVar ident -> failure x
  EStr string -> failure x
  ETrue -> failure x
  EFalse -> failure x

