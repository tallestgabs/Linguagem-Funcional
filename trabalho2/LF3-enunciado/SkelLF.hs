-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelLF where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsLF

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLF.Ident -> Result
transIdent x = case x of
  AbsLF.Ident string -> failure x

transProgram :: AbsLF.Program -> Result
transProgram x = case x of
  AbsLF.Prog functions -> failure x

transFunction :: AbsLF.Function -> Result
transFunction x = case x of
  AbsLF.Fun type_ ident decls exp -> failure x

transDecl :: AbsLF.Decl -> Result
transDecl x = case x of
  AbsLF.Dec type_ ident -> failure x

transExp :: AbsLF.Exp -> Result
transExp x = case x of
  AbsLF.EComp exp1 exp2 -> failure x
  AbsLF.ELambda decls exp -> failure x
  AbsLF.EIf exp1 exp2 exp3 -> failure x
  AbsLF.EOr exp1 exp2 -> failure x
  AbsLF.EAnd exp1 exp2 -> failure x
  AbsLF.ENot exp -> failure x
  AbsLF.ECon exp1 exp2 -> failure x
  AbsLF.EAdd exp1 exp2 -> failure x
  AbsLF.ESub exp1 exp2 -> failure x
  AbsLF.EMul exp1 exp2 -> failure x
  AbsLF.EDiv exp1 exp2 -> failure x
  AbsLF.ECall exp exps -> failure x
  AbsLF.EInt integer -> failure x
  AbsLF.EVar ident -> failure x
  AbsLF.EStr string -> failure x
  AbsLF.ETrue -> failure x
  AbsLF.EFalse -> failure x

transType :: AbsLF.Type -> Result
transType x = case x of
  AbsLF.Tbool -> failure x
  AbsLF.Tint -> failure x
  AbsLF.TStr -> failure x
  AbsLF.TFun type_ types -> failure x
