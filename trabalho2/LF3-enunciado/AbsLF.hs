-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language LF3.

module AbsLF where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Prog [Function]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Function = Fun Type Ident [Decl] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = Dec Type Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    -- possui composicao de funcoes e lambda, diferentemente da LF2
    = EComp Exp Exp
    | ELambda [Decl] Exp
    -- resto igual a LF2 menos em ECall
    | EIf Exp Exp Exp
    | EOr Exp Exp
    | EAnd Exp Exp
    | ENot Exp
    | ECon Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | ECall Exp [Exp]  -- EXP ao inves de Ident
    | EInt Integer
    | EVar Ident
    | EStr String
    | ETrue
    | EFalse
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = Tbool | Tint | TStr | TFun Type [Type]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

