-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLI where
import AbsLI
import LexLI
import ErrM

}

%name pProgram Program
%name pFunction Function
%name pDecl Decl
%name pListStm ListStm
%name pListFunction ListFunction
%name pListDecl ListDecl
%name pListExp ListExp
%name pStm Stm
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pType Type
%name pExp Exp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '&&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '*' { PT _ (TS _ 5) }
  '+' { PT _ (TS _ 6) }
  '++' { PT _ (TS _ 7) }
  ',' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '/' { PT _ (TS _ 10) }
  ';' { PT _ (TS _ 11) }
  '=' { PT _ (TS _ 12) }
  'String' { PT _ (TS _ 13) }
  'bool' { PT _ (TS _ 14) }
  'else' { PT _ (TS _ 15) }
  'false' { PT _ (TS _ 16) }
  'if' { PT _ (TS _ 17) }
  'int' { PT _ (TS _ 18) }
  'return' { PT _ (TS _ 19) }
  'then' { PT _ (TS _ 20) }
  'true' { PT _ (TS _ 21) }
  'void' { PT _ (TS _ 22) }
  'while' { PT _ (TS _ 23) }
  '{' { PT _ (TS _ 24) }
  '||' { PT _ (TS _ 25) }
  '}' { PT _ (TS _ 26) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListFunction { AbsLI.Prog (reverse $1) }
Function :: { Function }
Function : Type Ident '(' ListDecl ')' '{' ListStm '}' { AbsLI.Fun $1 $2 $4 (reverse $7) }
Decl :: { Decl }
Decl : Type Ident { AbsLI.Dec $1 $2 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
ListFunction :: { [Function] }
ListFunction : {- empty -} { [] }
             | ListFunction Function { flip (:) $1 $2 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] }
         | Decl { (:[]) $1 }
         | Decl ',' ListDecl { (:) $1 $3 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Stm :: { Stm }
Stm : Decl ';' { AbsLI.SDec $1 }
    | Ident '=' Exp ';' { AbsLI.SAss $1 $3 }
    | '{' ListStm '}' { AbsLI.SBlock (reverse $2) }
    | 'while' '(' Exp ')' Stm { AbsLI.SWhile $3 $5 }
    | 'return' Exp ';' { AbsLI.SReturn $2 }
    | 'if' '(' Exp ')' 'then' Stm 'else' Stm { AbsLI.SIf $3 $6 $8 }
Exp1 :: { Exp }
Exp1 : Exp1 '||' Exp2 { AbsLI.EOr $1 $3 } | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '&&' Exp3 { AbsLI.EAnd $1 $3 } | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : '!' Exp3 { AbsLI.ENot $2 } | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '++' Exp5 { AbsLI.ECon $1 $3 }
     | Exp4 '+' Exp5 { AbsLI.EAdd $1 $3 }
     | Exp4 '-' Exp5 { AbsLI.ESub $1 $3 }
     | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '*' Exp6 { AbsLI.EMul $1 $3 }
     | Exp5 '/' Exp6 { AbsLI.EDiv $1 $3 }
     | Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Ident '(' ListExp ')' { AbsLI.Call $1 $3 } | Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Integer { AbsLI.EInt $1 }
     | Ident { AbsLI.EVar $1 }
     | String { AbsLI.EStr $1 }
     | 'true' { AbsLI.ETrue }
     | 'false' { AbsLI.EFalse }
     | '(' Exp ')' { $2 }
Type :: { Type }
Type : 'bool' { AbsLI.Tbool }
     | 'int' { AbsLI.Tint }
     | 'void' { AbsLI.Tvoid }
     | 'String' { AbsLI.TStr }
     | Function { AbsLI.TFun $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

